Паттерн "Стратегия"

Смысл в том, что отделяется переменное от постоянного.
В данном примере все общее находится в абстактном классе Duck, а изменеяемые части вынесенны
в переменные(FlyBehavior и QuackBehavior)
Переменны описываются интерфейсами(что дает возможность использовать разную реализацию,
или подключать её во время исполнения)

        DuckWithoutQuack duckWithoutQuack = new DuckWithoutQuack();
        duckWithoutQuack.display();
        QuackDuck quackDuck = new QuackDuck();
        duckWithoutQuack.setQuackBehavior(quackDuck);
        duckWithoutQuack.performQuack();

Как видно в примере DuckWithoutQuack не имеет изначельно никаких методов связанных с Quack
однако в процессе выполенения.
Таким образом, расширяя абстрактный класс Duck, мы не влияем на работу его потомков.

Создавая потомков Duck, в их конструктуре, мы определяем, как будут выглядить реализация
изменяемых частей. При помощи методов set...Behavior() в Duck, мы даем возможность подключать
или изменять поведения дочерних классов. А при помощи методов perform...() можно вызывать исполнение
методов у классов, в которых изначельно не было заложенно выполения этого функционала.
